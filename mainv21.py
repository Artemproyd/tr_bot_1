from aiogram import Bot, Dispatcher, executor, types
from aiogram.types.web_app_info import WebAppInfo
import config
from aiogram.types import *
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
import logging
import json

from sql import BotDB

storage = MemoryStorage()
bot = Bot(token=config.TOKEN)
dp = Dispatcher(bot, storage=storage)
BotDB = BotDB('mbase.db')
logging.basicConfig(level=logging.INFO)

# to_chat = '-858407358'
to_chat = '-899126118'


################################################################################

class Form(StatesGroup):
    main = State()
    usl = State()
    lan = State()
    op1n = State()
    op2n = State()
    op3n = State()
    opl = State()
    opa = State()
    opn = State()
    opb = State()
    opbon = State()
    obr = State()
    ind = State()
    vg = State()
    vp = State()
    pred = State()
    zam = State()


################################################################################
markup4 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item17 = KeyboardButton("–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
item18 = KeyboardButton("–ó–∞–º–µ—á–∞–Ω–∏—è")
item12 = KeyboardButton("üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é")
markup4.add(item12, item17, item18)
item55 = KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏")
item55e = KeyboardButton("Settings")
markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item8 = KeyboardButton("–ù–∞—à–∏ —É—Å–ª—É–≥–∏")
item9 = KeyboardButton("üîÅ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å")
markup.add(item8, item9, item55)

markup5 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
markup5.add(item17, item18)

markup2 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
markup2.add(item12)

markup3 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item14 = KeyboardButton("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å")
item15 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü")
item16 = KeyboardButton("–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
markup3.add(item14, item15, item16)

markup1 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item1 = KeyboardButton("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üèãÔ∏è‚Äç‚ôÇÔ∏è")
item2 = KeyboardButton("–†–µ–ª–∞–∫—Å –ø—Ä–æ–≥—Ä–∞–º–º–∞ üíÜ‚Äç‚ôÇÔ∏è")
item3 = KeyboardButton("–ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üí™")
item4 = KeyboardButton("–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üß†")
item5 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å—ã")
item6 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 1 –Ω–µ–¥–µ–ª—é")
item7 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 2 –Ω–µ–¥–µ–ª—é")
item20 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 3 –Ω–µ–¥–µ–ª—é")
markup11 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item21 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —à–µ—é")
item22 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏")
item23 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ –Ω–æ–≥–∏")
item24 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Å–ø–∏–Ω—É")
item25 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏")
item26 = KeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü")
# item1 = KeyboardButton("–ò–¢ –ø—Ä–æ–≥—Ä–∞–º–º–∞ üèãÔ∏è‚Äç‚ôÇÔ∏è")
# item2 = KeyboardButton("–ò–Ω–¥. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏")
# item3 = KeyboardButton("–ò–Ω–¥. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏")
# item4 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Å–ø–∏–Ω—É")
# item5 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –Ω–æ–≥–∏")
# item6 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏")
# item7 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —à–µ—é")
# item13 = KeyboardButton("–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
markup1.row(item1)
markup1.row(item4, item2)
markup1.row(item3, item5, item12)
markup11.row(item21, item22)
markup11.row(item24, item25)
markup11.row(item23, item26)
# markup1.row(item5, item6)
# markup1.row(item7, item12, item13)

markup4e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item17e = KeyboardButton("Suggestions")
item18e = KeyboardButton("Remarks")
item12e = KeyboardButton(" üè† Return to Menu")
markup4e.add(item12e, item17e, item18e)

markupe = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item8e = KeyboardButton("Our services")
item9e = KeyboardButton("üîÅ Feedback")
markupe.add(item8e, item9e, item55e)

markup5e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
markup5e.add(item17e, item18e)

markup2e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
markup2e.add(item12e)

markup3e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item14e = KeyboardButton("Individual complex")
item15e = KeyboardButton("Complex for all muscle groups")
item16e = KeyboardButton("Your suggestions")
markup3e.add(item14e, item15e, item16e)

markup1e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item1e = KeyboardButton("Individual training program üèãÔ∏è‚Äç‚ôÇÔ∏è")
item2e = KeyboardButton("Relax program üíÜ‚Äç‚ôÇÔ∏è")
item3e = KeyboardButton("Motivational program üí™")
item4e = KeyboardButton("Psychological program üß†")
item5e = KeyboardButton("Complexes")
item6e = KeyboardButton("Order for 1 week")
item7e = KeyboardButton("Order for week 2")
item20e = KeyboardButton("Order for week 3")
markup11e = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item21e = KeyboardButton("Order a neck complex")
item22e = KeyboardButton("Order complex in hand")
item23e = KeyboardButton("Order a complex for legs")
item24e = KeyboardButton("Order complex for back")
item25e = KeyboardButton("Order complex in hand")
item26e = KeyboardButton("Order a complex for all muscle groups")
markup12 = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
item28e = KeyboardButton("English")
item28 = KeyboardButton("–†—É—Å—Å–∫–∏–π")
markup12.add(item28, item28e)

markup1e.row(item1e)
markup1e.row(item4e, item2e)
markup1e.row(item3e, item5e, item12e)
markup11e.row(item21e, item22e)
markup11e.row(item24e, item25e)
markup11e.row(item23e, item26e)

inf_usl = {}
inf_cos = {}
user_per = {}


# markup1 = ReplyKeyboardMarkup(resize_keyboard = True, one_time_keyboard = True)
# item1 = KeyboardButton("–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
# item4 = KeyboardButton("–ö–æ–º–ø–ª–µ–∫—Å—ã")
# markup1.add(item1, item4)


################################################################################

##–ü–µ—Ä–µ–¥ —Å—Ç–∞—Ä—Ç–æ–º
@dp.message_handler(content_types=["text"], state=None)
async def dla_debilov(message: types.Message, state: FSMContext):
    if message.text != '/start':
        await message.answer(
            "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤–≤–µ–¥–∏—Ç–µ /start\n–ï—Å–ª–∏ –≤—ã —É–∂–µ –≤–≤–æ–¥–∏–ª–∏ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, –∑–Ω–∞—á–∏—Ç –ø—Ä–æ–∏–∑–æ—à–ª–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ. –í—Å–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    else:
        await starter(message)


##start
async def ph(message: types.Message):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    user_per[str(user[0])] = 0
    postt = user[3]
    if int(postt) >= user[4]:
        postt = 0
    ppppp = ""
    ppppp += str('phot/')
    ppppp += str(postt)
    ppppp += str('.jpg')
    photo = InputFile(str(ppppp))
    await bot.send_photo(chat_id=message.chat.id, photo=photo)
    postt = int(postt) + 1
    if int(postt) >= user[4]:
        postt = 0
    BotDB.update_phot(postt, user[1])


@dp.message_handler(commands=['start'],
                    state=[Form.main, Form.op1n, Form.op2n, Form.op3n, Form.opa, Form.opb, Form.opn, Form.opl,
                           Form.opbon, Form.obr, Form.vg, Form.ind, Form.vp, Form.usl, Form.zam, Form.pred])
async def dla_platonov(message: types.Message, state: FSMContext):
    await starter(message)


async def starter(message: types.Message):
    global inf_usl, inf_cos
    try:
        BotDB.add_user(message.from_user.id,
                       str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)))
    except Exception:
        pass
    try:
        with open('data.json', encoding='utf-8') as json_file:
            inf_usl = json.load(json_file)
    except:
        pass
    try:
        with open('cost.json', encoding='utf-8') as json_file:
            inf_cos = json.load(json_file)
    except:
        pass
    await ph(message)
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('Hello!')
        await message.answer(
            'In this application you can purchase: \n 1) Individual training program üèãÔ∏è‚Äç‚ôÇÔ∏è\n 2) Complexes for certain muscle groups (back, legs, arms, neck) \n 3) Relax program üíÜ‚ôÇ Ô∏è\n 4) Motivational program üí™ \n 5) Psychological program üß† \n',
            reply_markup=markupe)
    else:
        await message.answer('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!')
        await message.answer(
            '–í –¥–∞–Ω–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–æ–±—Ä–µ—Å—Ç–∏: \n 1) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üèãÔ∏è‚Äç‚ôÇÔ∏è\n 2) –ö–æ–º–ø–ª–µ–∫—Å—ã –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—É –º—ã—à—Ü (—Å–ø–∏–Ω—ã, –Ω–æ–≥, —Ä—É–∫, —à–µ–∏) \n 3) –†–µ–ª–∞–∫—Å –ø—Ä–æ–≥—Ä–∞–º–º—É üíÜ‚Äç‚ôÇÔ∏è\n 4) –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É üí™ \n 5) –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ üß† \n',
            reply_markup=markup)
    markup111 = types.ReplyKeyboardMarkup()
    markup111.add(types.KeyboardButton('–û—Ç–∫—Ä—ã—Ç—å web —Å—Ç—Ä–∞–Ω–∏—Ü—É', web_app=WebAppInfo(url='https://itproger.com')))
    await message.answer('–ü—Ä–∏–≤–µ—Ç', reply_markup=markup111)
    await Form.main.set()


def gen_markup(message: types.Message):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    if user[2] != 1:
        markup.add(item6, item7, item20, item12)
    else:
        markup.add(item6e, item7e, item20e, item12e)
    return markup


@dp.message_handler(commands=['start'])
async def bot_message(message: types.Message):
    markup = gen_markup(30, "prefix", 5)
    await message.answer("asd", reply_markup=markup)


###back
@dp.message_handler(
    state=[Form.op1n, Form.op2n, Form.op3n, Form.opa, Form.opb, Form.opn, Form.opl, Form.opbon, Form.obr, Form.vg,
           Form.ind, Form.vp, Form.usl], text=['üè† –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é', "üè† Return to Menu"])
async def f_back0(message: types.Message):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('You are in the main menu.', reply_markup=markupe)
    else:
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=markup)
    await Form.main.set()


@dp.message_handler(state=[Form.main], text=['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', "Settings"])
async def author(message: types.Message):
    await ph(message)
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('Choose language', reply_markup=markup12)
    else:
        await message.answer('–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫', reply_markup=markup12)
    await Form.lan.set()


@dp.message_handler(state=[Form.lan], text=['–†—É—Å—Å–∫–∏–π', "English"])
async def author(message: types.Message):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if message.text == '–†—É—Å—Å–∫–∏–π':
        BotDB.update_lan(0, user[1])
    else:
        BotDB.update_lan(1, user[1])
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('You are in the main menu.', reply_markup=markupe)
    else:
        await message.answer('–í—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.', reply_markup=markup)
    await Form.main.set()


@dp.message_handler(state=[Form.main], text=['üîÅ –û–±—Ä–∞—Ç–Ω–∞—è —Å–≤—è–∑—å', "üîÅ Feedback"])
async def author(message: types.Message):
    await ph(message)
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer(
            'Thank you very much for using my bot. If you have any suggestions or comments, you can write them here',
            reply_markup=markup4e)
    else:
        await message.answer(
            '–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ —á—Ç–æ –ø–æ–ª—å–∑—É–µ—Ç–µ—Ç—Å—å –º–æ–∏–º –±–æ—Ç–æ–º. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –∑–∞–º–µ—á–∞–Ω–∏—è, —Ç–æ –º–æ–∂–µ—Ç–µ –∏—Ö –Ω–∞–ø–∏—Å–∞—Ç—å —Ç—É—Ç',
            reply_markup=markup4)
    await Form.obr.set()


@dp.message_handler(state=Form.obr, text=['–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è', 'Suggestions'])
async def predl(message: types.Message, state: FSMContext):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('Enter your suggestion in one message: ', reply_markup=markup5e)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: ', reply_markup=markup5)
    await Form.pred.set()


@dp.message_handler(state=Form.pred)
async def dobpredl(message: types.Message, state: FSMContext):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    uidd = message.from_user.id
    with open('predlog.txt', "a+") as f:
        ttt = str(uidd) + ' ' + str(message.from_user.first_name) + ' ' + str(message.from_user.last_name) + ') ' + str(
            message.text) + str('\n')
        f.write(ttt)
    if user[2]:
        await message.answer('You are in the feedback block', reply_markup=markup4)
    else:
        await message.answer('–í—ã –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', reply_markup=markup4e)
    await Form.obr.set()


@dp.message_handler(state=Form.obr, text=['Remarks', '–ó–∞–º–µ—á–∞–Ω–∏—è'])
async def zamech(message: types.Message, state: FSMContext):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('Enter your comment in one message: ', reply_markup=markup5e)
    else:
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∑–∞–º–µ—á–∞–Ω–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏: ', reply_markup=markup5)
    await Form.zam.set()


@dp.message_handler(state=Form.zam)
async def dodzam(message: types.Message, state: FSMContext):
    uidd = message.from_user.id
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    with open('zamechanya.txt', "a+") as f:
        ttt = str(uidd) + ' ' + str(message.from_user.first_name) + ' ' + str(message.from_user.last_name) + ') ' + str(
            message.text) + str('\n')
        f.write(ttt)
    if user[2]:
        await message.answer('You are in the feedback block', reply_markup=markup4e)
    else:
        await message.answer('–í—ã –≤ –±–ª–æ–∫–µ –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑–∏', reply_markup=markup4)
    await Form.obr.set()


@dp.message_handler(state=[Form.main], text=['–ù–∞—à–∏ —É—Å–ª—É–≥–∏', "Our services"])
async def usl(message: types.Message):
    await ph(message)
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    if user[2]:
        await message.answer('You are in the service block', reply_markup=markup1e)
    else:
        await message.answer('–í—ã –≤ –±–ª–æ–∫–µ —É—Å–ª—É–≥', reply_markup=markup1)
    await Form.usl.set()


@dp.message_handler(state=[Form.usl], text=['–ö–æ–º–ø–ª–µ–∫—Å—ã', 'Complexes'])
async def ind_1n(message: types.Message):
    global inf_usl, inf_cos
    await ph(message)
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    global user_per
    st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(
        str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' &11%91%1%07& ')
    user_per[str(user[0])] = st
    await message.answer(inf_usl[str(message.text)])
    await message.answer(inf_cos[str(message.text)], reply_markup=markup11)
    await Form.opl.set()


@dp.message_handler(state=[Form.usl])
async def ind_1n(message: types.Message):
    # await message.answer(inf_usl['Individual training program üèã‚ôÇÔ∏èÔ∏è'])
    try:
        global inf_usl, inf_cos
        await ph(message)
        markup444 = gen_markup(message)
        await message.answer(inf_usl[str(message.text)])
        await message.answer(inf_cos[str(message.text)], reply_markup=markup444)
        user = []
        user = BotDB.get_user_id(message.from_user.id)
        global user_per
        st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(
            str(message.from_user.first_name) + ' ' + str(
                message.from_user.last_name)) + ' &11%91%1%07& ' + message.text)
        user_per[str(user[0])] = st
        await Form.opl.set()
    except:
        pass


@dp.message_handler(state=[Form.opl], text=["–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 1 –Ω–µ–¥–µ–ª—é", "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 2 –Ω–µ–¥–µ–ª—é", "–ó–∞–∫–∞–∑–∞—Ç—å –Ω–∞ 3 –Ω–µ–¥–µ–ª—é",
                                            "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —à–µ—é", "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏",
                                            "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ –Ω–æ–≥–∏", "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Å–ø–∏–Ω—É",
                                            "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏", "–ó–∞–∫–∞–∑–∞—Ç—å –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü",
                                            "Order for 1 week", "Order for 2 week", "Order for 3 week",
                                            "Order a complex for the neck", "Order a complex for the arms",
                                            "Order a complex for the legs", "Order a complex for the back",
                                            "Order a complex for your hands", "Order a complex for all muscle groups"])
async def ind_1n(message: types.Message):
    user = []
    user = BotDB.get_user_id(message.from_user.id)
    global user_per
    st1 = user_per[str(user[0])].replace('&11%91%1%07&', str(message.text))
    st = st1
    await bot.send_message(to_chat, st)
    await message.answer(
        '–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä, –µ—Å–ª–∏ —á–µ—Ä–µ–∑ 2 —á–∞—Å–∞ —Å –≤–∞–º–∏ –Ω–µ —Å–≤—è–∂–µ—Ç—Å—è –Ω–∞—à –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä, —Ç–æ –ø–∏—à–∏—Ç–µ –Ω–∞ —ç—Ç–æ—Ç –∞–∫–∫–∞—É–Ω—Ç: @platon505',
        reply_markup=markup2)


# @dp.message_handler(state=[Form.usl], text = '–ò–Ω–¥. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏')
# async def ind_2n(message : types.Message):
#     await ph(message)
#     await message.answer('–í –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—Ö–æ–¥–∏—Ç: \n 1) –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è \n 2) –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º. \n 3) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. \n 4) –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –µ–≥–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è.')
#     await message.answer('–ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å : 1000 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.op2n.set()
#
# @dp.message_handler(state=[Form.usl], text = '–ò–Ω–¥. –ø—Ä–æ–≥—Ä–∞–º–º–∞ –Ω–∞ 3 –Ω–µ–¥–µ–ª–∏')
# async def ind_3n(message : types.Message):
#     await ph(message)
#     await message.answer('–í –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É –≤—Ö–æ–¥–∏—Ç: \n 1) –ø–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–ª–∏ –∏ —Å–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–ª—è –µ—ë –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è \n 2) –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–º–∞ –¥–ª—è –≤—ã—è–≤–ª–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º. \n 3) –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø–∏—Ç–∞–Ω–∏—é. \n 4) –ü–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Å–≤—è–∑–∏ —Å –∫–ª–∏–µ–Ω—Ç–æ–º –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –ø–æ–Ω–∏–º–∞—Ç—å –µ–≥–æ —Ç–µ–Ω–¥–µ–Ω—Ü–∏—é —Ä–∞–∑–≤–∏—Ç–∏—è.')
#     await message.answer('–ï—ë —Å—Ç–æ–∏–º–æ—Å—Ç—å : 1500 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.op3n.set()
#
# @dp.message_handler(state=[Form.usl], text = '–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏')
# async def ind_a(message : types.Message):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 400 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.opa.set()
#
# @dp.message_handler(state=[Form.usl], text = '–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –Ω–æ–≥–∏')
# async def ind_l(message : types.Message):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 400 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.opl.set()
#
# @dp.message_handler(state=[Form.usl], text = '–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Å–ø–∏–Ω—É')
# async def ind_b(message : types.Message):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 400 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.opb.set()
#
# @dp.message_handler(state=[Form.usl], text = '–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ —à–µ—é')
# async def ind_n(message : types.Message):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 400 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.opn.set()
#
# @dp.message_handler(state=[Form.usl], text = '–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è')
# async def ind_bon(message : types.Message):
#     await ph(message)
#     await message.answer('–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å - 450 —Ä—É–±–ª–µ–π \n –ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü - 550 —Ä—É–±–ª–µ–π \n –í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è ', reply_markup = markup3)
#     await Form.opbon.set()
#
# @dp.message_handler(state=[Form.opbon], text = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å")
# async def buy_ind(message: types.Message, state: FSMContext):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 450 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.ind.set()
#
# @dp.message_handler(state=[Form.opbon], text = "–ö–æ–º–ø–ª–µ–∫—Å –Ω–∞ –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü")
# async def buy_vg(message: types.Message, state: FSMContext):
#     await ph(message)
#     await message.answer('–°—Ç–æ–∏–º–æ—Å—Ç—å —ç—Ç–æ–≥–æ –∫–æ–º–ø–ª–µ–∫—Å–∞ : 550 —Ä—É–±–ª–µ–π', reply_markup = markup2)
#     await Form.vg.set()
#
# @dp.message_handler(state=[Form.opbon], text = "–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è")
# async def buy_vp(message: types.Message, state: FSMContext):
#     await ph(message)
#     await message.answer('–î–ª—è –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –Ω–∞–ø–∏—à–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é @platon505', reply_markup = markup2)
#     await Form.vp.set()
#
# @dp.message_handler(state=[Form.op1n, Form.op2n, Form.op3n, Form.opa, Form.opb, Form.opn, Form.opl, Form.vg, Form.ind], text = '–û–ø–ª–∞—Ç–∏—Ç—å')
# async def buy(message: types.Message, state: FSMContext):
#     await ph(message)
#     current_state = await state.get_state()
#     if current_state == 'Form:op1n':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[2])
#         per += 1
#         BotDB.update_one(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é –Ω–µ–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:op2n':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[3])
#         per += 1
#         BotDB.update_two(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é 2—Ö –Ω–µ–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:op3n':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[4])
#         per += 1
#         BotDB.update_three(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username)  + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é 3—Ö –Ω–µ–¥–µ–ª—å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:opa':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[6])
#         per += 1
#         BotDB.update_arm(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —Ä—É–∫–∏')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:opb':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[4])
#         per += 1
#         BotDB.update_back(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∫–æ–º–ø–ª–µ–∫—Å —Å–ø–∏–Ω—É')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:opn':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[7])
#         per += 1
#         BotDB.update_neck(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∫–æ–º–ø–ª–µ–∫—Å –Ω–∞ —à–µ—é')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:opl':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[5])
#         per += 1
#         BotDB.update_leg(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username)+ ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∫–æ–º–ø–ª–µ–∫—Å –Ω–æ–≥–∏')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:vg':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[8])
#         per += 1
#         BotDB.update_vg(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∫–æ–º–ø–ª–µ–∫—Å –≤—Å–µ –≥—Ä—É–ø–ø—ã –º—ã—à—Ü')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#     if current_state == 'Form:ind':
#         user = []
#         user = BotDB.get_user_id(message.from_user.id)
#         per = int(user[9])
#         per += 1
#         BotDB.update_ind(per, user[1])
#         st = str('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @' + str(message.from_user.username) + ' ' + str(str(message.from_user.first_name) + ' ' + str(message.from_user.last_name)) + ' –∑–∞–∫–∞–∑–∞–ª –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å')
#         await bot.send_message(to_chat, st)
#         await message.answer('–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è —Ç—Ä–µ–Ω–µ—Ä', reply_markup = markup2)
#


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
